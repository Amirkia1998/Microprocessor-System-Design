;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Mon Dec 19 2023
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

CODE    SEGMENT PARA 'CODE'
        ASSUME CS:CODE, DS:DATA, SS:STK

;====================================
STK    SEGMENT PARA STACK 'STACK'
        DW 20 DUP(?)
STK    ENDS
;====================================

;======================================
DATA    SEGMENT PARA 'DATA'
	       DIGITS     	DB 0C1H, 0C7H ;(83H = U)  (D3H = L)
	       
	       STATUS	   	DB 00H	 ;STATUS Status (0 = locked)(1 = unlocked)
	       TOTAL2	   	DW 0000H  ;Variable keeps entred key number	
	       TOTAL	   	DB 00H   ;Variable keeps entred key number (when defining PASS)
	       CONTROL		DB 00H   ;Flag for when incorrect pass is entered for 5th time
	       
	       MASTER_PASS	DB 9, 9, 9, 9
	       USER_PASS	DB 00H, 00H, 00H, 00H
	       TMP_PASS		DB 00H, 00H, 00H, 00H
	       
DATA    ENDS
;======================================


START PROC

MOV AX, DATA
MOV DS, AX

MOV AL, 089H 
OUT 0AEH, AL 	;configure

XOR BX, BX	;for safety
XOR CX, CX	;for safety

RESET:
   MOV STATUS,00H
   XOR BX,BX
   MOV CONTROL,00H
   MOV TOTAL,00H
   MOV TOTAL2,0000H
   MOV SI,0
   MOV AL, DIGITS[SI]
   OUT 0A8H, AL		;display U

OUT_LOOP:
   MOV AX,TOTAL2
   CMP TOTAL2,4
   JE CHECK_PASS

   MOV SI,1 
   MOV BX,0080H  ;Value for scanning column 

   L1:    
      MOV AL,BL
      OUT 0AAH, AL ;PORT B Output
   
      ;Read key:
      IN AL, 0ACH  ;PORT C Input
      MOV CX,4
      MOV DX, 0001H ;Value for scanning row
   
      L2: 
	 TEST AL,DL
	 JNZ KEY_RECOGNIZED
	 SHL DL,1 ;Scan next row if no key found
	 LOOP L2
	 SHR BL,1 ;Current column is Active
	 INC SI ;Index for outer loop (L1)
   
   CMP SI,4
   JB L1
   JMP OUT_LOOP

KEY_RECOGNIZED:
   IN AL, 0ACH
   AND AL, 0FH
   CMP AL, 00H
   JNE KEY_RECOGNIZED
   PUSH CX
   CALL MY_DELAY
   POP CX
   CALL DETECT_KEY
   ;maintaind entere key value in AX

   CMP STATUS,1
   JNZ UNLOCKED	;check pass if status is LOCKED
   CMP TOTAL2,4
   JB GET_KEY 

CHECK_PASS:
   ;compare entered pass with user and master pass
   
   XOR DX,DX
   XOR BX,BX
   MOV CX,4
   
L3:
   MOV AL,TMP_PASS[BX]
   CMP USER_PASS[BX],AL
   JNZ J1
   INC DL
   
   J1: CMP MASTER_PASS[BX],AL
      JNZ J2
      INC DH
      
   J2: INC BL
      LOOP L3
      CMP CONTROL,2
      JAE L4
      CMP DL,4
      JE RESET
   
L4:
   CMP DH,4
   JE RESET
   MOV TOTAL2,0
   MOV BL,CONTROL
   INC BL
   MOV CONTROL,BL
   JMP OUT_LOOP

GET_KEY:
   MOV DI,TOTAL2
   MOV TMP_PASS[DI],AL
   INC DI
   MOV TOTAL2,DI
   JMP OUT_LOOP


UNLOCKED:
   
   MOV DL, TOTAL ;Save entered key
   CMP TOTAL,4
   JB SAVE_KEY ;Save all 5 keys
   CMP AX,12	;check if 5th key is #
   JNZ RESET
   
   MOV STATUS,1  ;lock if last key is #
   MOV SI,1
   MOV AL, DIGITS[SI]
   OUT 0A8H, AL		;display L
   JMP OUT_LOOP

SAVE_KEY:
   MOV BL,TOTAL
   MOV USER_PASS[BX],AL
   INC BL
   MOV TOTAL,BL
   JMP OUT_LOOP

      RET
START ENDP


;================================
DETECT_KEY PROC NEAR
;Result in AX
;(4-CX)* 3 + SI 	to keep track of the key number

   MOV AX,4 
   SUB AX,CX  
   MOV BL,3
   MUL BL
   ADD AX,SI 

	   RET
DETECT_KEY ENDP
;================================

;================================
MY_DELAY PROC NEAR

MOV CX, 0FFFH
LOOP1: LOOP LOOP1

	 RET
MY_DELAY ENDP
;================================


CODE    ENDS
        END START